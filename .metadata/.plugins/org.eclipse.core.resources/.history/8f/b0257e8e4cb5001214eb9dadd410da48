import java.io.IOException;
import java.net.InetSocketAddress;
import java.nio.charset.Charset;
import java.util.Collection;
import java.util.concurrent.Executors;

import org.apache.mina.core.service.IoAcceptor;
import org.apache.mina.core.service.IoHandler;
import org.apache.mina.core.service.IoHandlerAdapter;
import org.apache.mina.core.session.IdleStatus;
import org.apache.mina.core.session.IoSession;
import org.apache.mina.filter.codec.ProtocolCodecFilter;
import org.apache.mina.filter.codec.textline.TextLineCodecFactory;
import org.apache.mina.filter.executor.ExecutorFilter;
import org.apache.mina.filter.logging.LoggingFilter;
import org.apache.mina.statemachine.StateMachine;
import org.apache.mina.statemachine.StateMachineFactory;
import org.apache.mina.statemachine.StateMachineProxyBuilder;
import org.apache.mina.statemachine.annotation.IoHandlerTransition;
import org.apache.mina.statemachine.annotation.State;
import org.apache.mina.statemachine.context.AbstractStateContext;
import org.apache.mina.statemachine.context.IoSessionStateContextLookup;
import org.apache.mina.statemachine.context.StateContext;
import org.apache.mina.statemachine.context.StateContextFactory;
import org.apache.mina.transport.socket.nio.NioSocketAcceptor;
import static org.apache.mina.statemachine.event.IoHandlerEvents.*;


public class MinaTimeServer {

	private static final int PORT = 50010;
	/**
	 * @param args
	 * @throws IOException 
	 */
	public static void main(String[] args) throws IOException {
		// TODO Auto-generated method stub
		IoAcceptor acceptor = new NioSocketAcceptor();
		
		acceptor.getFilterChain().addLast("logger", new LoggingFilter());
		acceptor.getFilterChain().addLast("codec", new ProtocolCodecFilter(new TextLineCodecFactory(Charset.forName("UTF-8"))));
		acceptor.getFilterChain().addLast("threadPool", new ExecutorFilter(Executors.newCachedThreadPool()));  
		
		acceptor.setHandler(createIoHandler());
		acceptor.getSessionConfig().setReadBufferSize(2048);
		acceptor.getSessionConfig().setIdleTime(IdleStatus.BOTH_IDLE, 10);
		acceptor.bind(new InetSocketAddress(PORT));
	}
	
	private static IoHandler createIoHandler() {
		StateMachine sm = StateMachineFactory.getInstance(
				IoHandlerTransition.class).create(TimeServerHandler.NOT_CONNECTED, new TimeServerHandler());
		return new StateMachineProxyBuilder().setStateContextLookup(
				new IoSessionStateContextLookup(new StateContextFactory() {
					
					@Override
					public StateContext create() {
						// TODO Auto-generated method stub
						return new TimeServerHandler.MyContext();
					}
				})).create(IoHandler.class, sm);
	}

}

class TimeServerHandler extends IoHandlerAdapter {
	@State public static final String ROOT = "root";
	@State(ROOT) public static final String NOT_CONNECTED = "NotConnected";
	@State(ROOT) public static final String CONNECTED = "Connected";
	
	@IoHandlerTransition(in = ROOT, weight = 100) 
	public void unhandledEvent() { 
		System.out.println("Warning..");
	} 
	
	@Override
	public void exceptionCaught(IoSession ssn, Throwable cause) throws Exception {
		cause.printStackTrace();
	}
	
	@IoHandlerTransition(on = MESSAGE_RECEIVED, in = NOT_CONNECTED, next = CONNECTED)
	public void firstConnect(MyContext myContext, IoSession ssn, Object message) throws Exception {
		String str = message.toString();
		System.out.println("Message read:");
		System.out.println(str);
		
		//sessionIDŽæ“¾
		long id = ssn.getId();
		
		//Date date = new Date();
		Collection<IoSession> ssns = ssn.getService().getManagedSessions().values();
		for(IoSession issns : ssns) {
			if(issns.getId() != id)
				issns.write(String.format("%d : %s(i am a new man!)",id,  message));
		}
		//ssn.write(date.toString());
		System.out.println("Message written...");
		//Thread.sleep(10000);
		//ssn.close(true);
	}
	
	@IoHandlerTransition(on = MESSAGE_RECEIVED, in = CONNECTED)
	public void notFirstConnect(MyContext myContext, IoSession ssn, Object message) throws Exception {
		String str = message.toString();
		System.out.println("Message read:");
		System.out.println(str);
		
		//sessionIDŽæ“¾
		long id = ssn.getId();
		
		//Date date = new Date();
		Collection<IoSession> ssns = ssn.getService().getManagedSessions().values();
		for(IoSession issns : ssns) {
			if(issns.getId() != id)
				issns.write(String.format("%d : %s(i am a old man!)",id,  message));
		}
		//ssn.write(date.toString());
		System.out.println("Message written...");
		//Thread.sleep(10000);
		//ssn.close(true);
	}
	
	@Override
	public void sessionIdle(IoSession ssn, IdleStatus status) throws Exception{
		System.out.println("IDLE " + ssn.getIdleCount(status));
	}
	
	static class MyContext extends AbstractStateContext {   
	    public String contextName;   
	}
}
