package exam.ruri.shibuki.sockettest;

import java.net.InetSocketAddress;
import java.net.Socket;
import java.nio.ByteBuffer;
import java.nio.channels.SelectionKey;
import java.nio.channels.Selector;
import java.nio.channels.SocketChannel;

import android.os.AsyncTask;
import android.os.Bundle;
import android.os.Message;
import android.util.Log;
import android.widget.EditText;

public class AcceptLuaVMasync  extends AsyncTask<Integer, Integer, Integer >{
	 private LoginActivity loginThred;
	 public AcceptLuaVMasync(LoginActivity loginThred) {
		 this.loginThred = loginThred;
	 }
	 @Override
	 protected void onPostExecute(Integer result){
	   //
	 }
	 @Override
	 protected Integer doInBackground(Integer... arg0) {
		 String address =
                 ((EditText)loginThred.findViewById(R.id.txtIPAdress)).getText().toString();
             String strPort =
                 ((EditText)loginThred.findViewById(R.id.txtPort)).getText().toString();
             int port = Integer.parseInt(strPort);

             SocketChannel sc = null;

             try {
            	 sc = SocketChannel.open();
            	 sc.configureBlocking(false);
            	 sc.connect(new InetSocketAddress(address, port));
            	 while(!sc.finishConnect()) {}
            	 
            	 //ログイン
            	 byte[] userName = ((EditText)loginThred.findViewById(R.id.txtUserName)).getText().toString().getBytes("UTF-8");
            	 byte[] password = ((EditText)loginThred.findViewById(R.id.txtPassword)).getText().toString().getBytes("UTF-8");
            	 int status = 1;
            	 int allLength = 8 + userName.length + password.length;
            	 int userNameLength = userName.length;
            	 int passwordLength = password.length;
            	 
            	 ByteBuffer buffer = ByteBuffer.allocate(16 + userNameLength + passwordLength);
            	 buffer.putInt(status);
            	 buffer.putInt(allLength);
            	 buffer.putInt(userNameLength);
            	 buffer.put(userName);
            	 buffer.putInt(passwordLength);
            	 buffer.put(password);
            	 buffer.flip();
            	 
            	 //送信
            	 sc.write(buffer);
            	 
            	 //結果取得
            	 buffer = ByteBuffer.allocate(1024);
            	 int numBytesRead;
            	 while((numBytesRead = sc.read(buffer)) != -1) {
     				if(numBytesRead == 0 ) {
    					//
    					continue;
    				}
     				buffer.flip();
    				while(buffer.remaining() > 0) {
    					int statue = buffer.getInt();
    					int length = buffer.getInt();
    					byte[] bytes = new byte[length];
    					buffer.get(bytes);
    					String body = new String(bytes, "UTF-8");
    					if("success".equals(body)) {
    						l.setSocket(sc);
    						
    					}
    				}
                	buffer.clear();
            		 
            		 
            	 }
            	 
            	 
             } catch (Exception e) {
             	Log.d("AcceptLuaVMasync", e.getMessage());
             }

             
        return(1);
	 }
}