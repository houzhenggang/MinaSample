import java.nio.ByteBuffer;
import java.nio.channels.Channels;
import java.nio.channels.ReadableByteChannel;
import java.nio.channels.WritableByteChannel;
import java.util.Random;


public class PipeTest {

	/**
	 * @param args
	 */
	public static void main(String[] args) throws Exception {
		// TODO Auto-generated method stub
		WritableByteChannel out = Channels.newChannel(System.out);
		//ReadableByteChannel workerChannel = 
	}
	
	
	
	private static class Worker extends Thread {
		WritableByteChannel channel;
		private int reps;
		
		Worker(WritableByteChannel channel, int reps) {
			this.channel = channel;
			this.reps = reps;
		}
		
		public void run() {
			ByteBuffer buffer = ByteBuffer.allocate(1000);
			try {
				for(int i = 0; i < this.reps; i++) {
					doSomeWork(buffer);
					while(channel.write(buffer) > 0) {}
				}
				this.channel.close();
			} catch(Exception e) {
				e.printStackTrace();
			}
		}
		
		private String[] products = {
			"No good deed goes unpunished",
			"To be, or what?",
			"No matter where you go, there you are",
			"Just say \"Yo\"",
			"My karma ran over my dogma"
		};
		
		private Random rand = new Random();
		private void doSomeWork(ByteBuffer buffer) {
			int product = rand.nextInt(products.length);
			buffer.clear();
			buffer.put(products[product].getBytes());
			buffer.put("\r\n".getBytes());
			buffer.flip();
		}
		
		
	}

}
