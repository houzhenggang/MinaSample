import java.io.IOException;
import java.net.InetSocketAddress;
import java.net.ServerSocket;
import java.nio.ByteBuffer;
import java.nio.channels.SelectionKey;
import java.nio.channels.Selector;
import java.nio.channels.ServerSocketChannel;
import java.nio.channels.SocketChannel;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;



public class SelectSocketsThreadPool {
	public static int PORT_NUMBER = 50001;
	private static final int MAX_THREADS = 5;
	private ThreadPool pool = new ThreadPool(MAX_THREADS);
	private ByteBuffer buffer = ByteBuffer.allocateDirect(1024);

	/**
	 * @param args
	 */
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		new SelectSocketsThreadPool();

	}
	
	public void go(String [] argv) throws Exception {
		int port = PORT_NUMBER;
		if (argv.length > 0) {
			port = Integer.parseInt(argv[0]);
		}
		
		System.out.println("Listening on port " + port);
		
		ServerSocketChannel serverChannel = ServerSocketChannel.open();
		ServerSocket serverSocket = serverChannel.socket();
		Selector selector = Selector.open();
		serverSocket.bind(new InetSocketAddress(port));
		serverChannel.configureBlocking(false);
		
		serverChannel.register(selector, SelectionKey.OP_ACCEPT);
		
		while(true) {
			int n = selector.select();
			
			if(n == 0) {
				continue;
			}
			
			Iterator<SelectionKey> it = selector.selectedKeys().iterator();
			
			while(it.hasNext()) {
				SelectionKey key = it.next();
				if(key.isAcceptable()) {
					ServerSocketChannel server = (ServerSocketChannel)key.channel();
					SocketChannel channel = server.accept();
					if(channel == null) {
						channel.configureBlocking(false);
						channel.register(selector, SelectionKey.OP_READ);
						buffer.clear();
						buffer.put("Hi there!\r\n".getBytes());
						buffer.flip();
						channel.write(buffer);
					}
					if(key.isReadable()) {
						readDataFromSocket(key);
					}
					
					it.remove();
				}
			}
		}
	}
	
	protected void readDataFromSocket(SelectionKey key) throws Exception {
		WorkerThread worker = pool.getWorker();
		if(worker == null) {
			return;
		}
		worker.serviceChannel(key);
	}
	
	private class ThreadPool {
		List<WorkerThread> idle = new LinkedList<WorkerThread>();
		
		public ThreadPool(int poolSize) {
			// TODO Auto-generated constructor stub
			for (int i = 0; i < poolSize; i++) {
				WorkerThread thread = new WorkerThread(this);
				thread.setName("Worker" + (i + 1));
				thread.start();
				
				idle.add(thread);
			}
		}
		
		WorkerThread getWorker() {
			WorkerThread worker = null;
			
			synchronized (idle) {
				if(idle.size() > 0) {
					worker = idle.remove(0);
				}
			}
			
			return worker;
		}
		
		void returnWorker(WorkerThread worker) {
			synchronized (idle) {
				idle.add(worker);
			}
		}
	}
	
	private class WorkerThread extends Thread {
		private ByteBuffer buffer = ByteBuffer.allocate(1024);
		private ThreadPool pool;
		private SelectionKey key;
		
		public WorkerThread(ThreadPool pool) {
			// TODO Auto-generated constructor stub
			this.pool = pool;
		}
		
		public synchronized void run() {
			System.out.println(this.getName() + " is ready");
			while(true) {
				try {
					this.wait();
				} catch(InterruptedException e) {
					e.printStackTrace();
					this.interrupted();
				}
				
				if(key == null) {
					continue;
				}
				
				System.out.println(this.getName() + " has been awakened");
				try {
					drainChannel(key);
				} catch(Exception e) {
					System.out.println("Caught '" + e + "' closing channel");
					
					try {
						key.channel().close();
					} catch(IOException ex) {
						ex.printStackTrace();
					}
					
					key.selector().wakeup();
				}
				
				key = null;
				this.pool.returnWorker(this);
			}
		}
		
		synchronized void serviceChannel(SelectionKey key) {
			this.key = key;
			key.interestOps(key.interestOps() & (~SelectionKey.OP_READ));
			this.notify();
		}
		
		void drainChannel(SelectionKey key) throws Exception {
			SocketChannel channel = (SocketChannel) key.channel();
			int count;
			
			buffer.clear();
			
			while((count = channel.read(buffer)) > 0) {
				buffer.flip();
				
				while(buffer.hasRemaining()) {
					channel.write(buffer);
				}
				
				buffer.clear();
			}
			
			if(count < 0) {
				channel.close();
				return;
			}
			
			key.interestOps(key.interestOps() | SelectionKey.OP_READ);
			key.selector().wakeup();
		}
	}
	

}
